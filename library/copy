#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

import os
import shutil
import time

DOCUMENTATION = '''
---
module: copy
short_description: Copies files to remote locations.
description:
     - The M(copy) module copies a file on the local box to remote locations.
options:
  src:
    description:
      - Local path to a file to copy to the remote server; can be absolute or relative.
    required: true
    default: null
    aliases: []
  dest:
    description:
      - Remote absolute path where the file should be copied to.
    required: true
    default: null
  backup:
    description:
      - Create a backup file including the timestamp information so you can get
        the original file back if you somehow clobbered it incorrectly.
    version_added: "0.7"
    required: false
    choices: [ "yes", "no" ]
    default: "no"
  others:
    description:
      - all arguments accepted by the M(file) module also work here
    required: false
examples:
   - code: "copy: src=/srv/myfiles/foo.conf dest=/etc/foo.conf owner=foo group=foo mode=0644"
     description: "Example from Ansible Playbooks"
   - code: "copy: src=/mine/ntp.conf dest=/etc/ntp.conf owner=root group=root mode=644 backup=yes"
     description: "Copy a new C(ntp.conf) file into place, backing up the original if it differs from the copied version"
author: Michael DeHaan
'''

def main():

    module = AnsibleModule(
        # not checking because of daisy chain to file module
        argument_spec = dict(
            src=dict(required=True),
            dest=dict(required=True),
            backup=dict(default=False, choices=BOOLEANS),
        ),
        add_file_common_args=True
    )

    src  = os.path.expanduser(module.params['src'])
    dest = os.path.expanduser(module.params['dest'])
    backup = module.boolean(module.params.get('backup', False))
    file_args = module.load_file_common_arguments(module.params)    

    if not os.path.exists(src):
        module.fail_json(msg="Source %s failed to transfer" % (src))
    if not os.access(src, os.R_OK):
        module.fail_json(msg="Source %s not readable" % (src))

    md5sum_src = module.md5(src)
    md5sum_dest = None

    if os.path.exists(dest):
        if not os.access(dest, os.W_OK):
            module.fail_json(msg="Destination %s not writable" % (dest))
        if not os.access(dest, os.R_OK):
            module.fail_json(msg="Destination %s not readable" % (dest))
        if (os.path.isdir(dest)):
            basename = os.path.basename(src)
            dest = os.path.join(dest, basename)
        md5sum_dest = module.md5(dest)
    else:
        if not os.path.exists(os.path.dirname(dest)):
            module.fail_json(msg="Destination directory %s does not exist" % (os.path.dirname(dest)))
        if not os.access(os.path.dirname(dest), os.W_OK):
            module.fail_json(msg="Destination %s not writable" % (os.path.dirname(dest)))

    backup_file = None
    if md5sum_src != md5sum_dest or os.path.islink(dest):
        try:
            if backup:
                if os.path.exists(dest):
                    backup_file = module.backup_local(dest)
            # allow for conversion from symlink.
            if os.path.islink(dest):
                os.unlink(dest)
                open(dest, 'w').close()
            #TODO:pid + epoch should avoid most collisions, hostname/mac for those using nfs?
            # might be an issue with exceeding path length
            dest_tmp = "%s.%s.%s.tmp" % (dest,os.getpid(),time.time())
            shutil.copyfile(src, dest_tmp)
            module.atomic_replace(dest_tmp, dest)
        except shutil.Error:
            module.fail_json(msg="failed to copy: %s and %s are the same" % (src, dest))
        except IOError:
            module.fail_json(msg="failed to copy: %s to %s" % (src, dest))
        changed = True
    else:
        changed = False

    res_args = dict(
        dest = dest, src = src, md5sum = md5sum_src, changed = changed
    )
    if backup_file:
        res_args['backup_file'] = backup_file

    module.params['dest'] = dest
    file_args = module.load_file_common_arguments(module.params)
    res_args['changed'] = module.set_file_attributes_if_different(file_args, res_args['changed'])

    module.exit_json(**res_args)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
