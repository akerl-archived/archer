#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2013, akerl
# Written by akerl
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

import sh
import tempfile
import base64

keyTemplate = '''Key-Type: RSA
Key-Length: {length}
Key-Usage: encrypt
Passphrase: {passphrase}
Name-Real: {name}
Name-Comment: {comment}
Name-Email: {email}
Expire-Date: {expiry}
%commit
'''


def getKeyID(name, comment, email):
    allKeys = [
        ' '.join(x.split()[1:])
        for x in sh.gpg('--list-keys').stdout.split('\n')
    ]
    thisKey = '{0} ({1}) <{2}>'.format(name, comment, email)
    for index, key in enumerate(allKeys):
        if key == thisKey:
            return allKeys[index-1].split()[0].split('/')[1]
    return None


def main():
    module = AnsibleModule(
        argument_spec={
            name={required=True},
            comment={required=True},
            email={required=True},
            expiry={default='0'},
            length={default='2048'},
            passphrase={default=''},
            replaceOld={default='no', choices=['yes', 'no']},
        }
    )

    params = module.params

    existingKey = getKeyID(params['name'], params['comment'], params['email'])
    if existingKey is not None:
        if params['replaceOld'] == 'no':
            module.exit_json(
                changed=False,
                msg='key already exists',
                keyid=existingKey,
                passphrase=''
            )
        else:
            fingerprint = tuple(
                x.rsplit('=', 1)[-1].translate(None, ' ')
                for x in sh.gpg('--fingerprint', existingKey).stdout.split('\n')
                if x.find('Key fingerprint') != -1
            )[0]
            sh.gpg('--delete-secret-and-public-key', '--batch', fingerprint)

    if params['passphrase'] == '':
        params['passphrase'] = base64.b64encode(os.urandom(100))[:-2].translate(None, '+/')[0:32]

    _, tmpfile = tempfile.mkstemp()
    with open(tmpfile, 'w') as handle:
        handle.write(keyTemplate.format(**params))
    try:
        sh.gpg('--gen-key', '--batch', tmpfile)
    except:
        module.fail_json(msg='failed to create gpg key')

    newKey = getKeyID(params['name'], params['comment'], params['email'])
    if newKey is None:
        module.fail_json(msg='generation succeeded but cannot locate new keyid')
    module.exit_json(
        changed=True,
        msg='created new key',
        keyid=newKey,
        passphrase=params['passphrase']
    )


# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()

