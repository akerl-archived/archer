#!/usr/bin/python -tt
# -*- coding: utf-8 -*-

# (c) 2012, Afterburn
# Written by Afterburn <http://github.com/afterburn> 
# Based on apt module written by Matthew Williams <matthew@flowroute.com>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.


DOCUMENTATION = '''
---
module: pacman
short_description: Package manager for Archlinux
description:
    - Manages Archlinux packages

version_added: "1.0"
options:
    name:
        description:
            - name of package to install/remove, or blank to upgrade all
        required: false

    state:
        description:
            - state of the package installed or absent. 
        required: false

    update_cache:
        description:
            - update the package db first (pacman -Syy)
        required: false

author: Afterburn
notes:  []
examples:
    - code: "pacman: update_cache=yes"
      description: runs a 'pacman -Syu' to upgrade the full system
    - code: "pacman: name=foo state=installed"
      description: install package foo"
    - code: "pacman: name=foo state=absent"
      description: remove package foo
    - code: "pacman: name=foo,bar state=absent
      description: remove packages foo and bar 
    - code: "pacman: name=bar, state=installed, update_cache=yes"
      description: update the package db (pacman -Syy) then install bar (bar will be the updated if a newer version exists) 
      
'''


import json
import shlex
import os
import sys
import subprocess

PACMAN_PATH = "/usr/bin/pacman"

def query_package(module, name, state="installed"):

    # pacman -Q returns 0 if the package is installed,
    # 1 if it is not installed
    if state == "installed":
        rc = os.system("pacman -Q %s" % (name))

        if rc == 0:
            return True

        return False


def update_package_db(module):
    rc = os.system("pacman -Syy")

    if rc != 0:
        module.fail_json(msg="could not update package db")
         

def remove_packages(module, packages):
    
    remove_c = 0
    # Using a for loop incase of error, we can report the package that failed
    for package in packages:
        # Query the package first, to see if we even need to remove
        if not query_package(module, package):
            continue

        rc = os.system("pacman -R %s --noconfirm" % (package))

        if rc != 0:
            module.fail_json(msg="failed to remove %s" % (package))
    
        remove_c += 1

    if remove_c > 0:

        module.exit_json(changed=True, msg="removed %s package(s)" % remove_c)

    module.exit_json(changed=False, msg="package(s) already absent")


def install_packages(module, packages):

    install_c = 0

    for package in packages:
        if query_package(module, package):
            continue

        rc = os.system("pacman -S %s --noconfirm" % (package))

        if rc != 0:
            module.fail_json(msg="failed to install %s" % (package))

        install_c += 1
    
    if install_c > 0:
        module.exit_json(changed=True, msg="installed %s package(s)" % (install_c))

    module.exit_json(changed=False, msg="package(s) already installed")

def upgrade_packages(module):
    try:
      results = [ x for x in subprocess.check_output(['pacman', '-Sup', "--print-format=----- %l"]).split('\n') if x.find('-----') == 0 ]
    except CalledProcessError:
      module.fail_json(msg="failed to upgrade system")

    if not len(results):
      module.exit_json(changed=False, msg="no upgrades required")
    else:
      rc = os.system('pacman -Su --noconfirm')
      if rc != 0:
        module.fail_json(msg="failed to upgrade packages")
      else:
        module.exit_json(changed=True, msg='all packages upgraded')

def main():
    module = AnsibleModule(
            argument_spec    = dict(
                state        = dict(default="installed", choices=["installed","absent"]),
                update_cache = dict(default="no", choices=["yes","no"], aliases=["update-cache"]),
                name         = dict(default="", aliases=["pkg"])))
                

    if not os.path.exists(PACMAN_PATH):
        module.fail_json(msg="cannot find pacman, looking for %s" % (PACMAN_PATH))

    p = module.params


    if module.boolean(p["update_cache"]):
        update_package_db(module)

    if p["name"] == "":
      upgrade_packages(module)
    else:
      pkgs = p["name"].split(",")

      if p["state"] == "installed":
          install_packages(module, pkgs)

      elif p["state"] == "absent":
          remove_packages(module, pkgs)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
    
main()       
 
