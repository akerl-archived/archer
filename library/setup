#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

import array
import fcntl
import glob
import platform
import re
import socket
import struct

DOCUMENTATION = '''
---
module: setup
short_description: Gathers facts about remote hosts
options: {}
description: 
     - This module is automatically called by playbooks to gather useful
       variables about remote hosts that can be used in playbooks. It can also be
       executed directly by C(/usr/bin/ansible) to check what variables are
       available to a host. Ansible provides many I(facts) about the system,
       automatically.
notes: 
    - More ansible facts will be added with successive releases. If I(facter) or
      I(ohai) are installed, variables from these programs will also be snapshotted
      into the JSON file for usage in templating. These variables are prefixed
      with C(facter_) and C(ohai_) so it's easy to tell their source. All variables are
      bubbled up to the caller. Using the ansible facts and choosing to not
      install I(facter) and I(ohai) means you can avoid Ruby-dependencies on your
      remote systems. (See also M(facter) and M(ohai).)
examples:
    - code: ansible all -m setup --tree /tmp/facts
      description: Obtain facts from all hosts and store them indexed by I(hostname) at C(/tmp/facts).
author: Michael DeHaan
'''

try:
    import selinux
    HAVE_SELINUX=True
except ImportError:
    HAVE_SELINUX=False

try:
    import json
except ImportError:
    import simplejson as json

class Facts(object):
    """
    This class should only attempt to populate those facts that
    are mostly generic to all systems.  This includes platform facts,
    service facts (eg. ssh keys or selinux), and distribution facts.
    Anything that requires extensive code or may have more than one
    possible implementation to establish facts for a given topic should
    subclass Facts.
    """

    _I386RE = re.compile(r'i[3456]86')
    # For the most part, we assume that platform.dist() will tell the truth.
    # This is the fallback to handle unknowns or exceptions
    OSDIST_DICT = { '/etc/redhat-release': 'RedHat',
                    '/etc/vmware-release': 'VMwareESX' }
    SELINUX_MODE_DICT = { 1: 'enforcing', 0: 'permissive', -1: 'disabled' }

    # A list of dicts.  If there is a platform with more than one
    # package manager, put the preferred one last.  If there is an
    # ansible module, use that as the value for the 'name' key.
    PKG_MGRS = [ { 'path' : '/usr/bin/yum',     'name' : 'yum' },
                 { 'path' : '/usr/bin/apt-get', 'name' : 'apt' },
                 { 'path' : '/usr/bin/zypper',  'name' : 'zypper' } ]

    def __init__(self):
        self.facts = {}
        self.get_platform_facts()
        self.get_distribution_facts()
        self.get_cmdline()
        self.get_public_ssh_host_keys()
        self.get_selinux_facts()
        self.get_pkg_mgr_facts()
        self.get_lsb_facts()

    def populate(self):
        return self.facts

    # Platform
    # patform.system() can be Linux, Darwin, Java, or Windows
    def get_platform_facts(self):
        self.facts['system'] = platform.system()
        self.facts['kernel'] = platform.release()
        self.facts['machine'] = platform.machine()
        self.facts['python_version'] = platform.python_version()
        self.facts['fqdn'] = socket.getfqdn()
        self.facts['hostname'] = self.facts['fqdn'].split('.')[0]
        self.facts['domain'] = '.'.join(self.facts['fqdn'].split('.')[1:])
        if self.facts['machine'] == 'x86_64':
            self.facts['architecture'] = self.facts['machine']
        elif Facts._I386RE.search(self.facts['machine']):
            self.facts['architecture'] = 'i386'
        else:
            self.facts['architecture'] = self.facts['machine']
        if self.facts['system'] == 'Linux':
            self.get_distribution_facts()

    # platform.dist() is deprecated in 2.6
    # in 2.6 and newer, you should use platform.linux_distribution()
    def get_distribution_facts(self):
        dist = platform.dist()
        self.facts['distribution'] = dist[0].capitalize() or 'NA'
        self.facts['distribution_version'] = dist[1] or 'NA'
        self.facts['distribution_release'] = dist[2] or 'NA'
        # Try to handle the exceptions now ...
        for (path, name) in Facts.OSDIST_DICT.items():
            if os.path.exists(path):
                if self.facts['distribution'] == 'Fedora':
                    pass
                elif name == 'RedHat':
                    data = get_file_content(path)
                    if 'Red Hat' in data:
                        self.facts['distribution'] = name
                    else:
                        self.facts['distribution'] = data.split()[0]
                else:
                    self.facts['distribution'] = name

    def get_cmdline(self):
        data = get_file_content('/proc/cmdline')
        if data:
            self.facts['cmdline'] = {}
            for piece in shlex.split(data):
                item = piece.split('=', 1)
                if len(item) == 1:
                    self.facts['cmdline'][item[0]] = True
                else:
                    self.facts['cmdline'][item[0]] = item[1]

    def get_public_ssh_host_keys(self):
        dsa_filename = '/etc/ssh/ssh_host_dsa_key.pub'
        rsa_filename = '/etc/ssh/ssh_host_rsa_key.pub'

        if self.facts['system'] == 'Darwin':
            dsa_filename = '/etc/ssh_host_dsa_key.pub'
            rsa_filename = '/etc/ssh_host_rsa_key.pub'
        dsa = get_file_content(dsa_filename)
        rsa = get_file_content(rsa_filename)
        if dsa is None:
            dsa = 'NA'
        else:
            self.facts['ssh_host_key_dsa_public'] = dsa.split()[1]
        if rsa is None:
            rsa = 'NA'
        else:
            self.facts['ssh_host_key_rsa_public'] = rsa.split()[1]

    def get_pkg_mgr_facts(self):
        self.facts['pkg_mgr'] = 'unknown'
        for pkg in Facts.PKG_MGRS:
            if os.path.exists(pkg['path']):
                self.facts['pkg_mgr'] = pkg['name']

    def get_lsb_facts(self):
        lsb_path = module.get_bin_path('lsb_release')
        if lsb_path is None:
            return self.facts
        cmd = subprocess.Popen([lsb_path, "-a"], shell=False,
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = cmd.communicate()
        if cmd.returncode == 0:
            self.facts['lsb'] = {}
        for line in out.split('\n'):
            if len(line) < 1:
                continue
            value = line.split(':', 1)[1].strip()
            if 'LSB Version:' in line:
                self.facts['lsb']['release'] = value
            elif 'Distributor ID:' in line:
                self.facts['lsb']['id'] = value
            elif 'Description:' in line:
                self.facts['lsb']['description'] = value
            elif 'Release:' in line:
                self.facts['lsb']['release'] = value
            elif 'Codename:' in line:
                self.facts['lsb']['codename'] = value
        if 'lsb' in self.facts and 'release' in self.facts['lsb']:
            self.facts['lsb']['major_release'] = self.facts['lsb']['release'].split('.')[0]

    def get_selinux_facts(self):
        if not HAVE_SELINUX:
            self.facts['selinux'] = False
            return
        self.facts['selinux'] = {}
        if not selinux.is_selinux_enabled():
            self.facts['selinux']['status'] = 'disabled'
        else:
            self.facts['selinux']['status'] = 'enabled'
            try:
                self.facts['selinux']['policyvers'] = selinux.security_policyvers()
            except OSError, e:
                self.facts['selinux']['policyvers'] = 'unknown'
            try:
                (rc, configmode) = selinux.selinux_getenforcemode()
                if rc == 0:
                    self.facts['selinux']['config_mode'] = Facts.SELINUX_MODE_DICT.get(configmode, 'unknown')
                else:
                    self.facts['selinux']['config_mode'] = 'unknown'
            except OSError, e:
                self.facts['selinux']['config_mode'] = 'unknown'
            try:
                mode = selinux.security_getenforce()
                self.facts['selinux']['mode'] = Facts.SELINUX_MODE_DICT.get(mode, 'unknown')
            except OSError, e:
                self.facts['selinux']['mode'] = 'unknown'
            try:
                (rc, policytype) = selinux.selinux_getpolicytype()
                if rc == 0:
                    self.facts['selinux']['type'] = policytype
                else:
                    self.facts['selinux']['type'] = 'unknown'
            except OSError, e:
                self.facts['selinux']['type'] = 'unknown'

class Hardware(Facts):
    """
    This is a generic Hardware subclass of Facts.  This should be further
    subclassed to implement per platform.  If you subclass this, it
    should define:
    - memfree_mb
    - memtotal_mb
    - swapfree_mb
    - swaptotal_mb
    - processor (a list)
    - processor_cores
    - processor_count

    All subclasses MUST define platform.
    """
    platform = 'Generic'

    def __new__(cls, *arguments, **keyword):
        subclass = cls
        for sc in Hardware.__subclasses__():
            if sc.platform == platform.system():
                subclass = sc
        return super(cls, subclass).__new__(subclass, *arguments, **keyword)

    def __init__(self):
        Facts.__init__(self)

    def populate(self):
        return self.facts

class LinuxHardware(Hardware):
    """
    Linux-specific subclass of Hardware.  Defines memory and CPU facts:
    - memfree_mb
    - memtotal_mb
    - swapfree_mb
    - swaptotal_mb
    - processor (a list)
    - processor_cores
    - processor_count

    In addition, it also defines number of DMI facts.
    """

    platform = 'Linux'
    MEMORY_FACTS = ['MemTotal', 'SwapTotal', 'MemFree', 'SwapFree']
    # DMI bits
    DMI_DICT = dict(
        form_factor     = '/sys/devices/virtual/dmi/id/chassis_type',
        product_name    = '/sys/devices/virtual/dmi/id/product_name',
        product_serial  = '/sys/devices/virtual/dmi/id/product_serial',
        product_uuid    = '/sys/devices/virtual/dmi/id/product_uuid',
        product_version = '/sys/devices/virtual/dmi/id/product_version',
        system_vendor   = '/sys/devices/virtual/dmi/id/sys_vendor',
        bios_date       = '/sys/devices/virtual/dmi/id/bios_date',
        bios_version    = '/sys/devices/virtual/dmi/id/bios_version'
    )
    # DMI SPEC -- http://www.dmtf.org/sites/default/files/standards/documents/DSP0134_2.7.0.pdf
    FORM_FACTOR = [ "Unknown", "Other", "Unknown", "Desktop",
                    "Low Profile Desktop", "Pizza Box", "Mini Tower", "Tower",
                    "Portable", "Laptop", "Notebook", "Hand Held", "Docking Station",
                    "All In One", "Sub Notebook", "Space-saving", "Lunch Box",
                    "Main Server Chassis", "Expansion Chassis", "Sub Chassis",
                    "Bus Expansion Chassis", "Peripheral Chassis", "RAID Chassis",
                    "Rack Mount Chassis", "Sealed-case PC", "Multi-system",
                    "CompactPCI", "AdvancedTCA", "Blade" ]

    def __init__(self):
        Hardware.__init__(self)

    def populate(self):
        self.get_cpu_facts()
        self.get_memory_facts()
        self.get_dmi_facts()
        return self.facts

    def get_memory_facts(self):
        if not os.access("/proc/meminfo", os.R_OK):
            return
        for line in open("/proc/meminfo").readlines():
            data = line.split(":", 1)
            key = data[0]
            if key in LinuxHardware.MEMORY_FACTS:
                val = data[1].strip().split(' ')[0]
                self.facts["%s_mb" % key.lower()] = long(val) / 1024

    def get_cpu_facts(self):
        i = 0
        physid = 0
        sockets = {}
        if not os.access("/proc/cpuinfo", os.R_OK):
            return
        self.facts['processor'] = []
        for line in open("/proc/cpuinfo").readlines():
            data = line.split(":", 1)
            key = data[0].strip()
            # model name is for Intel arch, Processor (mind the uppercase P)
            # works for some ARM devices, like the Sheevaplug.
            if key == 'model name' or key == 'Processor':
                if 'processor' not in self.facts:
                    self.facts['processor'] = []
                self.facts['processor'].append(data[1].strip())
                i += 1
            elif key == 'physical id':
                physid = data[1].strip()
                if physid not in sockets:
                    sockets[physid] = 1
            elif key == 'cpu cores':
                sockets[physid] = int(data[1].strip())
        if len(sockets) > 0:
            self.facts['processor_count'] = len(sockets)
            self.facts['processor_cores'] = reduce(lambda x, y: x + y, sockets.values())
        else:
            self.facts['processor_count'] = i
            self.facts['processor_cores'] = 'NA'

    def get_dmi_facts(self):
        for (key,path) in LinuxHardware.DMI_DICT.items():
            data = get_file_content(path)
            if data is not None:
                if key == 'form_factor':
                    try:
                        self.facts['form_factor'] = LinuxHardware.FORM_FACTOR[int(data)]
                    except IndexError, e:
                        self.facts['form_factor'] = 'unknown (%s)' % data
                else:
                    self.facts[key] = data
            else:
                self.facts[key] = 'NA'

class SunOSHardware(Hardware):
    """
    In addition to the generic memory and cpu facts, this also sets
    swap_reserved_mb and swap_allocated_mb that is available from *swap -s*.
    """
    platform = 'SunOS'

    def __init__(self):
        Hardware.__init__(self)

    def populate(self):
        self.get_cpu_facts()
        self.get_memory_facts()
        return self.facts

    def get_cpu_facts(self):
        cmd = subprocess.Popen("/usr/sbin/psrinfo -v", shell=True,
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = cmd.communicate()
        self.facts['processor'] = []
        for line in out.split('\n'):
            if 'processor operates' in line:
                if 'processor' not in self.facts:
                    self.facts['processor'] = []
                self.facts['processor'].append(line.strip())
        self.facts['processor_cores'] = 'NA'
        self.facts['processor_count'] = len(self.facts['processor'])

    def get_memory_facts(self):
        cmd = subprocess.Popen("/usr/sbin/prtconf", shell=False,
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = cmd.communicate()
        for line in out.split('\n'):
            if 'Memory size' in line:
                self.facts['memtotal_mb'] = line.split()[2]
        cmd = subprocess.Popen("/usr/sbin/swap -s", shell=True,
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = cmd.communicate()
        allocated = long(out.split()[1][:-1])
        reserved = long(out.split()[5][:-1])
        used = long(out.split()[8][:-1])
        free = long(out.split()[10][:-1])
        self.facts['swapfree_mb'] = free / 1024
        self.facts['swaptotal_mb'] = (free + used) / 1024
        self.facts['swap_allocated_mb'] = allocated / 1024
        self.facts['swap_reserved_mb'] = reserved / 1024

class FreeBSDHardware(Hardware):
    """
    FreeBSD-specific subclass of Hardware.  Defines memory and CPU facts:
    - memfree_mb
    - memtotal_mb
    - swapfree_mb
    - swaptotal_mb
    - processor (a list)
    - processor_cores
    - processor_count
    """
    platform = 'FreeBSD'
    DMESG_BOOT = '/var/run/dmesg.boot'

    def __init__(self):
        Hardware.__init__(self)

    def populate(self):
        self.get_cpu_facts()
        self.get_memory_facts()
        return self.facts

    def get_cpu_facts(self):
        self.facts['processor'] = []
        cmd = subprocess.Popen("/sbin/sysctl -n hw.ncpu", shell=True,
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = cmd.communicate()
        self.facts['processor_count'] = out.strip()

        try:
            dmesg_boot = open(FreeBSDHardware.DMESG_BOOT)
        except IOError:
            dmesg_cmd = subprocess.Popen("/sbin/dmesg", shell=True,
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            dmesg_boot = dmesg_cmd.stdout

        for line in dmesg_boot.readlines():
            if 'CPU:' in line:
                cpu = re.sub(r'CPU:\s+', r"", line)
                self.facts['processor'].append(cpu.strip())
            if 'Logical CPUs per core' in line:
                self.facts['processor_cores'] = line.split()[4]


    def get_memory_facts(self):
        cmd = subprocess.Popen("/sbin/sysctl vm.stats", shell=True,
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = cmd.communicate()
        for line in out.split('\n'):
            data = line.split()
            if 'vm.stats.vm.v_page_size' in line:
                pagesize = long(data[1])
            if 'vm.stats.vm.v_page_count' in line:
                pagecount = long(data[1])
            if 'vm.stats.vm.v_free_count' in line:
                freecount = long(data[1])
        self.facts['memtotal_mb'] = pagesize * pagecount / 1024 / 1024
        self.facts['memfree_mb'] = pagesize * freecount / 1024 / 1024
        # Get swapinfo.  swapinfo output looks like:
        # Device          1M-blocks     Used    Avail Capacity
        # /dev/ada0p3        314368        0   314368     0%
        #
        cmd = subprocess.Popen("/usr/sbin/swapinfo -m", shell=True,
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = cmd.communicate()
        lines = out.split('\n')
        if len(lines[-1]) == 0:
            lines.pop()
        data = lines[-1].split()
        self.facts['swaptotal_mb'] = data[1]
        self.facts['swapfree_mb'] = data[3]

class Network(Facts):
    """
    This is a generic Network subclass of Facts.  This should be further
    subclassed to implement per platform.  If you subclass this,
    you must define:
    - interfaces (a list of interface names)
    - interface_<name> dictionary of ipv4, ipv6, and mac address information.

    All subclasses MUST define platform.
    """
    platform = 'Generic'

    IPV6_SCOPE = { '0' : 'global',
                   '10' : 'host',
                   '20' : 'link',
                   '40' : 'admin',
                   '50' : 'site',
                   '80' : 'organization' }

    def __new__(cls, *arguments, **keyword):
        subclass = cls
        for sc in Network.__subclasses__():
            if sc.platform == platform.system():
                subclass = sc
        return super(cls, subclass).__new__(subclass, *arguments, **keyword)

    def __init__(self):
        Facts.__init__(self)

    def populate(self):
        return self.facts

class LinuxNetwork(Network):
    """
    This is a Linux-specific subclass of Network.  It defines
    - interfaces (a list of interface names)
    - interface_<name> dictionary of ipv4, ipv6, and mac address information.
    - all_ipv4_addresses and all_ipv6_addresses: lists of all configured addresses.
    - ipv4_address and ipv6_address: the first non-local address for each family.
    """
    platform = 'Linux'

    def __init__(self):
        Network.__init__(self)

    def populate(self):
        ip_path = module.get_bin_path('ip')
        if ip_path is None:
            return self.facts
        default_ipv4, default_ipv6 = self.get_default_interfaces(ip_path)
        interfaces, ips = self.get_interfaces_info(ip_path, default_ipv4, default_ipv6)
        self.facts['interfaces'] = interfaces.keys()
        for iface in interfaces:
            self.facts[iface] = interfaces[iface]
        self.facts['default_ipv4'] = default_ipv4
        self.facts['default_ipv6'] = default_ipv6
        self.facts['all_ipv4_addresses'] = ips['all_ipv4_addresses']
        self.facts['all_ipv6_addresses'] = ips['all_ipv6_addresses']
        return self.facts

    def get_default_interfaces(self, ip_path):
        # Use the commands:
        #     ip -4 route get 8.8.8.8                     -> Google public DNS
        #     ip -6 route get 2404:6800:400a:800::1012    -> ipv6.google.com
        # to find out the default outgoing interface, address, and gateway
        command = dict(
            v4 = [ip_path, '-4', 'route', 'get', '8.8.8.8'],
            v6 = [ip_path, '-6', 'route', 'get', '2404:6800:400a:800::1012']
        )
        interface = dict(v4 = {}, v6 = {})
        for v in 'v4', 'v6':
            if v == 'v6' and not socket.has_ipv6:
                continue
            output = subprocess.Popen(command[v], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
            if not output:
                # v6 routing may result in 
                #   RTNETLINK answers: Invalid argument
                continue
            words = output.split('\n')[0].split()
            # A valid output starts with the queried address on the first line
            if len(words) > 0 and words[0] == command[v][-1]:
                for i in range(len(words) - 1):
                    if words[i] == 'dev':
                        interface[v]['interface'] = words[i+1]
                    elif words[i] == 'src':
                        interface[v]['address'] = words[i+1]
                    elif words[i] == 'via' and words[i+1] != command[v][-1]:
                        interface[v]['gateway'] = words[i+1]
        return interface['v4'], interface['v6']

    def get_interfaces_info(self, ip_path, default_ipv4, default_ipv6):
        interfaces = {}
        ips = dict(
            all_ipv4_addresses = [],
            all_ipv6_addresses = [],
        )
        output = subprocess.Popen([ip_path, 'addr', 'show'], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
        for line in output.split('\n'):
            if line:
                words = line.split()
                if not line.startswith(' '):
                    device = words[1][0:-1]
                    mtu = words[4]
                elif words[0].startswith('link/'):
                    iface_type = words[0].split('/')[1]
                    # tun interfaces can have any interface type, but won't have an address
                    if iface_type in ('void', 'none') or len(words) == 1:
                        macaddress = 'unknown'
                    else:
                        macaddress = words[1]
                elif words[0] == 'inet':
                    if '/' in words[1]:
                        address, netmask_length = words[1].split('/')
                    else:
                        # pointopoint interfaces do not have a prefix
                        address = words[1]
                        netmask_length = "32"
                    address_bin = struct.unpack('!L', socket.inet_aton(address))[0]

                    netmask_bin = (1<<32) - (1<<32>>int(netmask_length))
                    netmask = socket.inet_ntoa(struct.pack('!L', netmask_bin))

                    network = socket.inet_ntoa(struct.pack('!L', address_bin & netmask_bin))

                    iface = words[-1]
                    # If an interface has multiple IPv4 addresses, make up an
                    # interface name for each address
                    if iface in interfaces:
                        i = 0
                        while str(iface) + "_" + str(i) in interfaces:
                            i += 1
                        iface = str(iface) + "_" + str(i)

                    interfaces[iface] = {}
                    interfaces[iface]['macaddress'] = macaddress
                    interfaces[iface]['mtu'] = mtu
                    interfaces[iface]['type'] = iface_type
                    interfaces[iface]['device'] = device
                    interfaces[iface]['ipv4'] = {'address': address,
                                                 'netmask': netmask,
                                                 'network': network}

                    # If this is the default address, update default_ipv4
                    if 'address' in default_ipv4 and default_ipv4['address'] == address:
                        default_ipv4['netmask'] = netmask
                        default_ipv4['network'] = network
                        default_ipv4['macaddress'] = macaddress
                        default_ipv4['mtu'] = mtu
                        default_ipv4['type'] = iface_type
                        default_ipv4['alias'] = words[-1]

                    if not address.startswith('127.'):
                        ips['all_ipv4_addresses'].append(address)

                elif words[0] == 'inet6':
                    address, prefix = words[1].split('/')
                    scope = words[3]

                    iface = device
                    if iface not in interfaces:
                        interfaces[iface] = {}
                        interfaces[iface]['macaddress'] = macaddress
                        interfaces[iface]['mtu'] = mtu
                        interfaces[iface]['device'] = device
                    if 'ipv6' not in interfaces[iface]:
                        interfaces[iface]['ipv6'] = []
                    interfaces[iface]['ipv6'].append( {
                        'address': address,
                        'prefix': prefix,
                        'scope': scope} )

                    # If this is the default address, update default_ipv6
                    if 'address' in default_ipv6 and default_ipv6['address'] == address:
                        default_ipv6['prefix'] = prefix
                        default_ipv6['scope'] = scope
                        default_ipv6['macaddress'] = macaddress
                        default_ipv6['mtu'] = mtu
                        default_ipv6['type'] = iface_type

                    if not address == '::1':
                        ips['all_ipv6_addresses'].append(address)

        return interfaces, ips

class Virtual(Facts):
    """
    This is a generic Virtual subclass of Facts.  This should be further
    subclassed to implement per platform.  If you subclass this,
    you should define:
    - virtualization_type
    - virtualization_role
    - container (e.g. solaris zones, freebsd jails, linux containers)

    All subclasses MUST define platform.
    """

    def __new__(cls, *arguments, **keyword):
        subclass = cls
        for sc in Virtual.__subclasses__():
            if sc.platform == platform.system():
                subclass = sc
        return super(cls, subclass).__new__(subclass, *arguments, **keyword)

    def __init__(self):
        Facts.__init__(self)

    def populate(self):
        return self.facts

class LinuxVirtual(Virtual):
    """
    This is a Linux-specific subclass of Virtual.  It defines
    - virtualization_type
    - virtualization_role
    """
    platform = 'Linux'

    def __init__(self):
        Virtual.__init__(self)

    def populate(self):
        self.get_virtual_facts()
        return self.facts

    # For more information, check: http://people.redhat.com/~rjones/virt-what/
    def get_virtual_facts(self):
        if os.path.exists("/proc/xen"):
            self.facts['virtualization_type'] = 'xen'
            self.facts['virtualization_role'] = 'guest'
            if os.path.exists('/proc/xen/capabilities'):
                for line in open('/proc/xen/capabilities'):
                    if "control_d" in line:
                        self.facts['virtualization_role'] = 'host'
            return
 
        if os.path.exists('/proc/vz'):
            self.facts['virtualization_type'] = 'openvz'
            if os.path.exists('/proc/bc'):
                self.facts['virtualization_role'] = 'host'
            else:
                self.facts['virtualization_role'] = 'guest'
            return

        product_name = get_file_content('/sys/devices/virtual/dmi/id/product_name')

        if product_name in ['KVM', 'Bochs']:
            self.facts['virtualization_type'] = 'kvm'
            self.facts['virtualization_role'] = 'guest'
            return

        if product_name == 'VMware Virtual Platform':
            self.facts['virtualization_type'] = 'VMware'
            self.facts['virtualization_role'] = 'guest'
            return

        bios_vendor = get_file_content('/sys/devices/virtual/dmi/id/bios_vendor')

        if bios_vendor == 'Xen':
            self.facts['virtualization_type'] = 'xen'
            self.facts['virtualization_role'] = 'guest'
            return

        if bios_vendor == 'innotek GmbH':
            self.facts['virtualization_type'] = 'virtualbox'
            self.facts['virtualization_role'] = 'guest'
            return

        sys_vendor = get_file_content('/sys/devices/virtual/dmi/id/sys_vendor')

        # FIXME: This does also match hyperv
        if sys_vendor == 'Microsoft Corporation':
            self.facts['virtualization_type'] = 'VirtualPC'
            self.facts['virtualization_role'] = 'guest'
            return

        if sys_vendor == 'Parallels Software International Inc.':
            self.facts['virtualization_type'] = 'parallels'
            self.facts['virtualization_role'] = 'guest'
            return

        for line in open('/proc/self/status').readlines():
            if re.match('^VxID: \d+', line):
                self.facts['virtualization_type'] = 'linux_vserver'
                if re.match('^VxID: 0', line):
                    self.facts['virtualization_role'] = 'host'
                else:
                    self.facts['virtualization_role'] = 'guest'
                return

        for line in open('/proc/cpuinfo').readlines():
            if re.match('^model name.*QEMU Virtual CPU', line):
                self.facts['virtualization_type'] = 'kvm'
            elif re.match('^vendor_id.*User Mode Linux', line):
                self.facts['virtualization_type'] = 'uml'
            elif re.match('^model name.*UML', line):
                self.facts['virtualization_type'] = 'uml'
            elif re.match('^vendor_id.*PowerVM Lx86', line):
                self.facts['virtualization_type'] = 'powervm_lx86'
            elif re.match('^vendor_id.*IBM/S390', line):
                self.facts['virtualization_type'] = 'ibm_systemz'
            else:
                continue
            self.facts['virtualization_role'] = 'guest'
            return

        # Beware that we can have both kvm and virtualbox running on a single system
        if os.path.exists("/proc/modules"):
            modules = []
            for line in open("/proc/modules").readlines():
                data = line.split(" ", 1)
                modules.append(data[0])

            if 'kvm' in modules:
                self.facts['virtualization_type'] = 'kvm'
                self.facts['virtualization_role'] = 'host'
                return

            if 'vboxdrv' in modules:
                self.facts['virtualization_type'] = 'virtualbox'
                self.facts['virtualization_role'] = 'host'
                return

class SunOSVirtual(Virtual):
    """
    This is a SunOS-specific subclass of Virtual.  It defines
    - virtualization_type
    - virtualization_role
    - container
    """
    platform = 'SunOS'

    def __init__(self):
        Virtual.__init__(self)

    def populate(self):
        self.get_virtual_facts()
        return self.facts

    def get_virtual_facts(self):
        cmd = subprocess.Popen("/usr/sbin/prtdiag", shell=True,
                               stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = cmd.communicate()
        for line in out.split('\n'):
            if 'VMware' in line:
                self.facts['virtualization_type'] = 'vmware'
                self.facts['virtualization_role'] = 'guest'
            if 'Parallels' in line:
                self.facts['virtualization_type'] = 'parallels'
                self.facts['virtualization_role'] = 'guest'
            if 'VirtualBox' in line:
                self.facts['virtualization_type'] = 'virtualbox'
                self.facts['virtualization_role'] = 'guest'
            if 'HVM domU' in line:
                self.facts['virtualization_type'] = 'xen'
                self.facts['virtualization_role'] = 'guest'
        # Check if it's a zone
        if os.path.exists("/usr/bin/zonename"):
            cmd = subprocess.Popen("/usr/bin/zonename", shell=True,
                stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = cmd.communicate()
            if out.rstrip() != "global":
                self.facts['container'] = 'zone'
        # Check if it's a branded zone (i.e. Solaris 8/9 zone)
        if os.path.isdir('/.SUNWnative'):
            self.facts['container'] = 'zone'
        # If it's a zone check if we can detect if our global zone is itself virtualized.
        # Relies on the "guest tools" (e.g. vmware tools) to be installed
        if 'container' in self.facts and self.facts['container'] == 'zone':
            cmd = subprocess.Popen("/usr/sbin/modinfo", shell=True,
                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = cmd.communicate()
            for line in out.split('\n'):
                if 'VMware' in line:
                    self.facts['virtualization_type'] = 'vmware'
                    self.facts['virtualization_role'] = 'guest'
                if 'VirtualBox' in line:
                    self.facts['virtualization_type'] = 'virtualbox'
                    self.facts['virtualization_role'] = 'guest'

def get_file_content(path):
    data = None
    if os.path.exists(path) and os.access(path, os.R_OK):
        data = open(path).read().strip()
        if len(data) == 0:
            data = None
    return data

def ansible_facts():
    facts = {}
    facts.update(Facts().populate())
    facts.update(Hardware().populate())
    facts.update(Network().populate())
    facts.update(Virtual().populate())
    return facts

# ===========================================

def run_setup(module):

    setup_options = {}
    facts = ansible_facts()

    for (k, v) in facts.items():
        setup_options["ansible_%s" % k.replace('-', '_')] = v

    # if facter is installed, and we can use --json because
    # ruby-json is ALSO installed, include facter data in the JSON

    if os.path.exists("/usr/bin/facter"):
        cmd = subprocess.Popen("/usr/bin/facter --json", shell=True,
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = cmd.communicate()
        facter = True
        try:
            facter_ds = json.loads(out)
        except:
            facter = False
        if facter:
            for (k,v) in facter_ds.items():
                setup_options["facter_%s" % k] = v

    # ditto for ohai, but just top level string keys
    # because it contains a lot of nested stuff we can't use for
    # templating w/o making a nicer key for it (TODO)

    if os.path.exists("/usr/bin/ohai"):
        cmd = subprocess.Popen("/usr/bin/ohai", shell=True,
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = cmd.communicate()
        ohai = True
        try:
            ohai_ds = json.loads(out)
        except:
            ohai = False
        if ohai:
            for (k,v) in ohai_ds.items():
                if type(v) == str or type(v) == unicode:
                    k2 = "ohai_%s" % k.replace('-', '_')
                    setup_options[k2] = v

    setup_result = {}
    setup_result['ansible_facts'] = setup_options

    # hack to keep --verbose from showing all the setup module results
    setup_result['verbose_override'] = True

    return setup_result

def main():
    global module
    module = AnsibleModule(
        argument_spec = dict()
    )
    data = run_setup(module)
    module.exit_json(**data)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
