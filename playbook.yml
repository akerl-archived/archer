---
- hosts: all
  user: root
  gather_facts: no
  vars_prompt:
    - name: root_pw
      prompt: Root password
      private: yes 
      encrypt: sha512_crypt
    - name: user_pw
      prompt: User password
      private: yes 
      encrypt: sha512_crypt
    - name: github_pw
      prompt: Github password
      private: yes 
  vars_files:
    - resources/common.yml
    - resources/packages.yml
    - resources/modules.yml
    - resources/repos.yml
    - resources/pacnews.yml
    - resources/ips.yml
  tasks:
    - script: scripts/pacmankeygen.sh
    - raw: pacman -Sy --noconfirm --needed pacman
    - raw: pacman -S --noconfirm --needed python2 python2-pip
    - action: setup
      tags: test

    - pip: name=$item state=latest pip=pip2
      with_items: ${modules.python2}
    - copy: src=files/mirrorlist dest=/etc/pacman.d/mirrorlist
    - copy: src=files/pacman.conf dest=/etc/pacman.conf
    - pacman: update=yes
    - pacman: name=$item
      with_items: ${packages.add}
    - pacman: name=$item state=absent
      with_items: ${packages.remove}
    - pacnew: path=${item.path} new=${item.new} old=${item.old} keep=${item.keep}
      with_items: ${pacnews}
    - pacnew: check_all=yes
    - pip: name=$item state=latest pip=pip3
      with_items: ${modules.python3}
    - raw: systemctl --system daemon-reload

    - template: src=files/hostname.j2 dest=/etc/hostname
    - template: src=files/hosts.j2 dest=/etc/hosts
    - template: src=files/netcfg.j2 dest=/etc/network.d/main
    - lineinfile: dest=/etc/conf.d/netcfg regexp=^NETWORKS line=NETWORKS=(main)
    - raw: 'systemctl stop dhcpcd@eth0 ; systemctl start netcfg ; systemctl start netcfg'
    - service: name=dhcpcd@eth0.service action=stop enabled=no
    - service: name=netcfg.service enabled=yes
    - copy: src=files/resolv.conf dest=/etc/resolv.conf
    - copy: src=files/iptables dest=/etc/iptables/iptables.rules
    - copy: src=files/ip6tables dest=/etc/iptables/ip6tables.rules
    - service: name=iptables action=start enabled=yes
    - service: name=ip6tables action=start enabled=yes

    - raw: 'timedatectl set-timezone US/Eastern'
    - lineinfile: dest=/etc/locale.gen line='en_US.UTF-8 UTF-8' regexp='#?en_US.UTF-8 UTF-8'
    - lineinfile: dest=/etc/locale.gen line='en_US ISO-8859-1' regexp='#?en_US ISO-8859-1'
    - raw: locale-gen

    # fstab?
    # motd/issue?
    - service: name=haveged.service action=start enabled=yes
    - service: name=syslog-ng.service action=start enabled=yes
    - service: name=cronie.service action=start enabled=yes
    - service: name=remote-fs.target action=stop enabled=no
    - file: state=absent path=$item
      with_items: ${files.toremove}
    - user: name=ftp state=absent remove=yes force=yes
    - lineinfile: >
        dest=/etc/shadow
        regexp='^dbus'
        line='dbus:x:14871::::::'
    - lineinfile: >
        dest=/etc/shadow
        regexp='^uuidd'
        line='uuidd:x:14871::::::'

    - lineinfile: >
        dest=/etc/mail/exim.conf 
        regexp='^[ #]*primary_hostname =' 
        line='primary_hostname = ${inventory_hostname}.${domain}'
    - lineinfile: >
        dest=/etc/mail/exim.conf 
        insertafter='^[ #]*primary_hostname ='
        regexp='^local_interfaces ='
        line='local_interfaces = 127.0.0.1'
    - lineinfile: >
        dest=/etc/mail/exim.conf 
        regexp='^domainlist local_domains =' 
        line="domainlist local_domains = localhost : localhost.localdomain : ${inventory_hostname} : ${inventory_hostname}.${domain}"
    - lineinfile: >
        dest=/etc/mail/aliases 
        regexp='^[\s#]*root:' 
        line='root: admin@${domain}'
    - service: name=exim.service action=start enabled=yes

    - group: name=remote
    - user: >
        name=root 
        generate_ssh_key=yes 
        ssh_key_bits=8096 
        ssh_key_comment=root@${inventory_hostname}
        shell=/bin/zsh
    - user: >
        name=${admin_user}
        password=${user_pw}
        generate_ssh_key=yes
        ssh_key_bits=8096
        ssh_key_comment=${admin_user}@${inventory_hostname}
        groups='wheel,remote'
        shell=/bin/zsh
    - github: username=${github_user} password=${github_pw}
    - raw: 'ssh git@github.com -o StrictHostKeyChecking=no || true'
    - git: dest=${item.path} repo=${item.repo}
      with_items: ${repos}

    - copy: src=files/dotdotdot.conf dest='/opt/dotdotdot/conf'
    - file: state=link path='/root/...' src=/opt/dotdotdot
    - file: state=link path='/home/akerl/...' src=/opt/dotdotdot
    - command: /opt/dotdotdot/... install creates=/root/.zshrc
    - command: su akerl -c '/opt/dotdotdot/... install' creates=/home/akerl/.zshrc

    - file: path=/opt/packer/packer mode=0755
    - file: state=link path=/usr/local/bin/packer src=/opt/packer/packer
    - command: /usr/local/bin/packer -S fwknop --noconfirm creates=/usr/bin/fwknop
    - shell: /usr/local/bin/packer -S gnupg1 --noconfirm > /dev/null creates=/usr/bin/gpg1
    - file: state=link path=/usr/bin/gpg src=/usr/bin/gpg1

    - command: make install chdir=/opt/google-authenticator creates=/lib/security/pam_google_authenticator.so

    - file: state=directory path=/home/akerl/.ssh owner=akerl group=users mode=0700
    - assemble: src=/opt/keys dest=/home/akerl/.ssh/authorized_keys

    - copy: src=files/sshd_config dest=/etc/ssh/sshd_config

    - tokengen: length=16 keyspace=base32
      register: twofa
    - template: src=files/2fa.j2 dest=/root/.2fa mode=0600
    - local_action: >
        command open 
        'https://www.google.com/chart?chs=300x250&chld=M|0&cht=qr&chl=otpauth://totp/${inventory_hostname}%3Fsecret%3D${twofa.token}'
    - lineinfile: >
        dest=/etc/pam.d/su
        regexp='auth\s*required\s*pam_wheel.so\s*use_uid'
        line='auth required pam_wheel.so use_uid'
    - lineinfile: >
        dest=/etc/pam.d/su-l
        regexp='auth\s*required\s*pam_wheel.so\s*use_uid'
        line='auth required pam_wheel.so use_uid'
    - lineinfile: >
        dest=/etc/pam.d/su
        insertafter='auth\s*required\s*pam_wheel.so\s*use_uid'
        regexp='auth required pam_google_authenticator.so secret=~/.2fa'
        line='auth required pam_google_authenticator.so secret=~/.2fa'
    - lineinfile: >
        dest=/etc/pam.d/su-l
        insertafter='auth\s*required\s*pam_wheel.so\s*use_uid'
        regexp='auth required pam_google_authenticator.so secret=~/.2fa'
        line='auth required pam_google_authenticator.so secret=~/.2fa'
    - lineinfile: >
        dest=/etc/pam.d/system-auth
        insertafter='auth\s*required\s*pam_unix.so'
        regexp='auth required pam_google_authenticator.so secret=~/.2fa'
        line='auth required pam_google_authenticator.so secret=~/.2fa'

    - gpgkey: >
        length=2048
        expiry=0
        name='Les Aker' 
        comment=${inventory_hostname} 
        email=admin@${inventory_hostname}.${domain}
        replaceOld=yes
      register: newKey
    - signkey: ${adminKeyID} ${newKey.passphrase}
    - template: src=files/fwknop.conf dest=/etc/fwknop/access.conf
    - lineinfile: >
        dest=/etc/fwknop/fwknopd.conf
        regexp='#*PCAP_FILTER\s*udp\s*port\s*\d+\s*;'
        line='PCAP_FILTER udp port 465;'
    - service: name=fwknopd.service action=restart enabled=yes
    - command: gpg -a --output /root/gpg.pub --yes --export ${newKey.keyid}
    - fetch: src=/root/gpg.pub dest=tmp
    - local_action: shell while gpg --yes --no-tty --batch --delete-key admin@grego.a-rwx.org ; do echo -n ; done
    - local_action: command gpg --import tmp/${inventory_hostname}/root/gpg.pub
    - file: path=/root/gpg.pub state=absent


    - local_action: file state=absent path=tmp
...

